root@vm-balasank:/home/regress/jfit# jfit logs dg
	usage: jfit logs [-h] group_name service
	jfit logs: error: the following arguments are required: service
root@vm-balasank:/home/regress/jfit# jfit status
	usage: jfit status [-h] [-j] group_name
jfit status: error: the following arguments are required: group_name

===========================================================
root@vm-balasank:/home/regress/jfit# jfit status dg
Name              Status
-------------------------
root@vm-balasank:/home/regress/jfit# jfit status dg
Name              Status
-------------------------
root@vm-balasank:/home/regress/jfit# jfit status test_group
^[`Name              Status
-------------------------


INFLUXDB

=========================
root@vm-balasank:/home/regress/jfit# jfit cli jfit influxdb
docker-compose -p jfit  -f jfit_api_server.yaml -f jfit_mgd.yaml -f jfit_postgres.yaml -f jfit_influxdb.yaml -f jfit_grafana.yaml exec influxdb sh
# ui^H^H^H
sh: 1:: not found
# influx
Connected to http://localhost:8086 version 1.3.6
InfluxDB shell version: 1.3.6

> use dg_choc-mx240-k
Using database dg_choc-mx240-k
> show measurements
> exit
# exit




root@vm-balasank:/home/regress/jfit# jfit logs dg
usage: jfit logs [-h] group_name service
jfit logs: error: the following arguments are required: service
root@vm-balasank:/home/regress/jfit# jfit logs dg telegraf
docker-compose -p dg  -f jfit_telegraf.yaml -f jfit_kapacitor_training.yaml -f jfit_kapacitor.yaml ps -q dg-telegraf
docker inspect --format="{{.LogPath}}" ef69a49e5a0278e01a2c056f12f76b417af39f05f7edda87df9c14e3dc73651b
vi /var/lib/docker/containers/ef69a49e5a0278e01a2c056f12f76b417af39f05f7edda87df9c14e3dc73651b/ef69a49e5a0278e01a2c056f12f76b417af39f05f7edda87df9c14e3dc73651b-json.log
root@vm-balasank:/home/regress/jfit# jfit cli dg
usage: jfit cli [-h] group_name service
jfit cli: error: the following arguments are required: service



KAPACITOR
=========
root@vm-balasank:/home/regress/jfit# jfit cli dg kapacitor
docker-compose -p dg  -f jfit_telegraf.yaml -f jfit_kapacitor_training.yaml -f jfit_kapacitor.yaml exec dg-kapacitor sh
# kapacitor list tasks
ID                                     Type      Status    Executing Databases and Retention Policies
dg_choc-mx240-k_line-cards1_line-cards stream    enabled   true      ["dg_choc-mx240-k"."autogen" "Native"."autogen"]
# bash

root@b55bc040d8ac:/# kapacitor show dg_choc-mx240-k_line-cards1_line-cards
-replay                                 dg_choc-mx240-k_line-cards1_line-cards

root@b55bc040d8ac:/# kapacitor show dg_choc-mx240-k_line-cards1_line-cards
ID: dg_choc-mx240-k_line-cards1_line-cards
Error:
Template:
Type: stream
Status: enabled
Executing: true
Created: 24 May 18 11:11 UTC
Modified: 24 May 18 11:11 UTC
LastEnabled: 24 May 18 11:11 UTC
Databases Retention Policies: ["dg_choc-mx240-k"."autogen" "Native"."autogen"]
TICKscript:
var jti_oc_database = 'dg_choc-mx240-k'

var jti_native_database = 'dg_choc-mx240-k'

var jti_iagent_database = 'dg_choc-mx240-k'

var to_database = 'dg_choc-mx240-k'

var var_memory = stream
    |from()
        .database(jti_oc_database)
        .retentionPolicy('autogen')
        .measurement('dg_choc-mx240-k./components/')
        .where(lambda: "/components/component/properties/property/@name" == 'memory-dram-used')
        .where(lambda: "/components/component/@name" =~ /^FPC[0-9]*$/)
    |eval(lambda: int("/components/component/properties/property/state/value"), lambda: string("/components/component/@name"))
        .as('memory', 'name')
        .quiet()
    |log()
        .prefix('memory_field_stream')

var var_temperature = stream
    |from()
        .database(jti_oc_database)
        .retentionPolicy('autogen')
        .measurement('dg_choc-mx240-k./components/')
        .where(lambda: "/components/component/properties/property/@name" == 'temperature-intake')
        .where(lambda: "/components/component/@name" =~ /^FPC[0-9]*$/)
    |eval(lambda: int("/components/component/properties/property/state/value"), lambda: string("/components/component/@name"))
        .as('temperature', 'name')
        .quiet()
    |log()
        .prefix('temperature_field_stream')

var var_temperature_hyphen_dt = var_temperature
    |groupBy('/components/component/@name')
    |eval(lambda: int("temperature"), lambda: string("name"))
        .as('temperature', 'name')
    @JfitDynamicThreshold()
        .baseline_db('dg_choc-mx240-k')
        .baseline_measurement('"line-cards1/line-cards/_ML_temperature-dt"')
        .baseline_tags('name')
        .field_name('temperature')
        .influxdb('http://influxdb:8086')
        .return_as('temperature-dt')
    |log()
        .prefix('temperature-dt_field_stream')

var joined_fields = var_memory
    |union(var_temperature, var_temperature_hyphen_dt)
    |groupBy('/components/component/@name')
    |flatten()
        .tolerance(1s)
    |default()
        .field('memory', -2147483648)
        .field('temperature', -2147483648)
        .field('temperature-dt', 'NA')
    |eval(lambda: int("memory"), lambda: string("name"), lambda: int("temperature"), lambda: string("temperature-dt"))
        .as('memory', 'name', 'temperature', 'temperature-dt')
        .tags('name')
    |delete()
        .tag('/components/component/@name')
    |log()
        .prefix('joined-fields')

joined_fields
    |influxDBOut()
        .measurement('line-cards1/line-cards')
        .database(to_database)
        .flushInterval(10ms)

DOT:
digraph dg_choc-mx240-k_line-cards1_line-cards {
graph [throughput="0.00 points/s"];

stream0 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
stream0 -> from4 [processed="0"];
stream0 -> from1 [processed="0"];

from4 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
from4 -> eval5 [processed="0"];

eval5 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
eval5 -> log6 [processed="0"];

log6 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
log6 -> groupby7 [processed="0"];
log6 -> union13 [processed="0"];

groupby7 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
groupby7 -> eval8 [processed="0"];

eval8 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
eval8 -> JfitDynamicThreshold9 [processed="0"];

JfitDynamicThreshold9 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
JfitDynamicThreshold9 -> log10 [processed="0"];

log10 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
log10 -> union13 [processed="0"];

from1 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
from1 -> eval2 [processed="0"];

eval2 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
eval2 -> log3 [processed="0"];

log3 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
log3 -> union13 [processed="0"];

union13 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
union13 -> groupby14 [processed="0"];

groupby14 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
groupby14 -> flatten15 [processed="0"];

flatten15 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
flatten15 -> default16 [processed="0"];

default16 [avg_exec_time_ns="0s" errors="0" fields_defaulted="0" tags_defaulted="0" working_cardinality="0" ];
default16 -> eval17 [processed="0"];

eval17 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
eval17 -> delete18 [processed="0"];

delete18 [avg_exec_time_ns="0s" errors="0" fields_deleted="0" tags_deleted="0" working_cardinality="0" ];
delete18 -> log19 [processed="0"];

log19 [avg_exec_time_ns="0s" errors="0" working_cardinality="0" ];
log19 -> influxdb_out20 [processed="0"];

influxdb_out20 [avg_exec_time_ns="0s" errors="0" points_written="0" working_cardinality="0" write_errors="0" ];
}
root@b55bc040d8ac:/# exit
exit
# exit


Restarting a device group
==================================
root@vm-balasank:/home/regress/jfit# jfit restart dg
docker-compose -p dg  -f jfit_telegraf.yaml -f jfit_kapacitor_training.yaml -f jfit_kapacitor.yaml restart
Restarting dg_dg-configure-kapacitor-tasks_1          ... done
Restarting dg_dg-configure-kapacitor-training-tasks_1 ... done
Restarting dg_dg-kapacitor_1                          ... done
Restarting dg_dg-telegraf_1                           ... done
Restarting dg_dg-kapacitor-training_1                 ... done

Success!


Device-Groups logs
==================
root@vm-balasank:/home/regress/jfit# docker logs -f dg_dg-telegraf_1
2018/05/24 11:11:32 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:11:32Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:11:32Z I! Loaded outputs: influxdb
2018-05-24T11:11:32Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:11:32Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:11:32Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
2018/05/24 11:18:19 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:18:19Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:18:19Z I! Loaded outputs: influxdb
2018-05-24T11:18:19Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:18:19Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:18:19Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
 ^C
root@vm-balasank:/home/regress/jfit# jfit restart dg
docker-compose -p dg  -f jfit_telegraf.yaml -f jfit_kapacitor_training.yaml -f jfit_kapacitor.yaml restart
Restarting dg_dg-configure-kapacitor-tasks_1          ... done
Restarting dg_dg-configure-kapacitor-training-tasks_1 ... done
Restarting dg_dg-kapacitor_1                          ... done
Restarting dg_dg-telegraf_1                           ... done
Restarting dg_dg-kapacitor-training_1                 ... done

Success!
root@vm-balasank:/home/regress/jfit# docker logs -f dg_dg-telegraf_1
2018/05/24 11:11:32 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:11:32Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:11:32Z I! Loaded outputs: influxdb
2018-05-24T11:11:32Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:11:32Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:11:32Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
2018/05/24 11:18:19 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:18:19Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:18:19Z I! Loaded outputs: influxdb
2018-05-24T11:18:19Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:18:19Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:18:19Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
2018/05/24 11:20:38 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:20:38Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:20:38Z I! Loaded outputs: influxdb
2018-05-24T11:20:38Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:20:38Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:20:38Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
^C
root@vm-balasank:/home/regress/jfit# docker logs -f dg_dg-telegraf_1
2018/05/24 11:11:32 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:11:32Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:11:32Z I! Loaded outputs: influxdb
2018-05-24T11:11:32Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:11:32Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:11:32Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
2018/05/24 11:18:19 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:18:19Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:18:19Z I! Loaded outputs: influxdb
2018-05-24T11:18:19Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:18:19Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:18:19Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
2018/05/24 11:20:38 I! Using config file: /etc/telegraf/telegraf.conf
2018-05-24T11:20:38Z I! Starting Telegraf v1.0.0-beta1-1258-g1be9aa12
2018-05-24T11:20:38Z I! Loaded outputs: influxdb
2018-05-24T11:20:38Z I! Loaded inputs: inputs.jti_openconfig_telemetry
2018-05-24T11:20:38Z I! Tags enabled: host=ef69a49e5a02
2018-05-24T11:20:38Z I! Agent Config: Interval:10s, Quiet:false, Hostname:"ef69a49e5a02", Flush Interval:10s
^C



INFLUXDB
=========
root@vm-balasank:/home/regress/jfit# jfit cli influxdb
usage: jfit cli [-h] group_name service
jfit cli: error: the following arguments are required: service
root@vm-balasank:/home/regress/jfit# jfit cli jfit influxdb
docker-compose -p jfit  -f jfit_api_server.yaml -f jfit_mgd.yaml -f jfit_postgres.yaml -f jfit_influxdb.yaml -f jfit_grafana.yaml exec influxdb sh
# influx
Connected to http://localhost:8086 version 1.3.6
InfluxDB shell version: 1.3.6
Using database dg2_teakwood
> show measurements
name: measurements
name
----
dg2_teakwood./components/
line-cards1/line-cards
line-cards1/line-cards/_ML_temperature-dt
> show measurements
name: measurements
name
----
dg2_teakwood./components/
line-cards1/line-cards
line-cards1/line-cards/_ML_temperature-dt
>





Swagger 
========
docker run -p 8082:8080 swaggerapi/swagger-editor

	- Open The browser
	- http://10.209.1.98:8082/
	- Copy the JSON which codes the REST API in Swagger Editor
	- You will see a left and right window explaining the Rest API and it Parameters
	- you can also edit and execute the same in the editor



Router Configs
=============
set interfaces lo0.0 family inet address 127.0.0.1/32
set system services extension-service request-response grpc clear-text address 0.0.0.0
set system services extension-service request-response grpc clear-text port 50051
set system services extension-service request-response grpc max-connections 10
set system services extension-service request-response grpc skip-authentication
set system services extension-service notification allow-clients address 0.0.0.0/0
set system services extension-service traceoptions file jsd
set system services extension-service traceoptions flag all
set system services netconf ssh



INFLUX DB ACCESS 
===============
http://contrail-ubm-vijaygadde02.ccp.juniper.net:8083/?#


RUNNING JFIT
========
	- Add interfaces are up in the Playbook instance
	- Define Triggers
	




Deleting Docker Volume
=======================

root@vm-balasank:/home/regress/test-jfit/jfit# docker volumes ls
docker: 'volumes' is not a docker command.
See 'docker --help'
root@vm-balasank:/home/regress/test-jfit/jfit# docker volume ls
DRIVER              VOLUME NAME
local               0a0c345b089b7db72717f0038a2230ea81ef53adfdcce10bfcdbee0dd71e7e60
local               0b10533baf8e362ca3fef70e2746f0d0c54934646b46988fe34d4570b78d2496
local               0e5b7dbe9c7253ecd1e75e51e7f4a71cabf09decd78dab02721c7aa78c4aab12
local               10d7a69c6bf0b4acb8e4c1f7452541222214dc0a5b7939dc58e9df0588e0d11b
local               2ac03f69a47ab79723cb93b5835f418c93cfbf13c8403a7b0278f674b579bcbd
local               3d13ed7fdd8c4d06e75f33fd39c0559d2f660c3159da1b1dd6215bf43b888ed6
local               4da899b46c42cd44a1818423839d6baf95a68067575d8d32abd7dd8177b80876
local               4ee3a96ab9f2d9454fbe8238a6e35987eae52d92a11f70b78821dc47f6828d62
local               4f31564d401f49735d12bbe3baa7cfb7af2eb8b3d46f97a2998ec67926154279
local               82a6bb9522a24c65bab0f22ca0396117e31825dd9361005a6f2379144dc5a083
local               a3028358001cbd14605b48d66daa256a6aea027ab22e48f29613a1eb6b2efef0
local               b63288b7f984214e2eaa02d1ee164e5834cbbb07ec5ab39c1b9622ded587c4fc
local               d74b76f6ec925ca4a5385a29ec16c99db2c233e399685345f2f37fa65499cbd5
local               e400ccdf66a8ae91c955ffaf9192809155634789f9f5a54454c679c0d0ac1b21
root@vm-balasank:/home/regress/test-jfit/jfit# docker volume rm `docker volume ls -q`
0a0c345b089b7db72717f0038a2230ea81ef53adfdcce10bfcdbee0dd71e7e60
0b10533baf8e362ca3fef70e2746f0d0c54934646b46988fe34d4570b78d2496
0e5b7dbe9c7253ecd1e75e51e7f4a71cabf09decd78dab02721c7aa78c4aab12



Testing MGD
===========
1. Modify Docker file
2. Build using ./sb.py build -s jfit-mgd
3. Change version.json file
4. jfit init



1. Jfit install will load the docker images
	- docker load
	- Compose files will be generated
	- Version.json file will be generated in dist folder. 

2. jfit init
	- Will use the compose files based on the versions in the version.json file 
	- run the images as containers

3. In case if the user has not done any commit, then the image version will be same. 
4. If he has committed then he will see the new version which he needs to update in the version.json 
   and do "jfit destroy" and "jfit init"



API SERVER 
============
PYTHONPATH=~/code/iceberg/jfit-api-server JFIT_ROOT=/Users/ishaank/code/iceberg/jfit-build/dist INFLUXDB_HOST=localhost INFLUXDB_PORT=8086 python -m api_server


PYTHONPATH=~/jfit-build/src/jfit-api-server JFIT_ROOT=~/jfit-build/dist INFLUXDB_HOST=localhost INFLUXDB_PORT=8086 python3 -m api_server

jfit stop -s api_server

1. change port 
2. in Build, remove all copy stuffs
3. Gui not needed
